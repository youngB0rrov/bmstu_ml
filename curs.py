# -*- coding: utf-8 -*-
"""Curs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MmTHz2iEUE8AgDOMWZyZwOTBMkuQUlIr
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from math import ceil
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

np.random.seed(42)

# Генерация временных данных
dates = pd.date_range(start="2024-01-01", end="2024-03-31 23:00:00", freq='H')
df = pd.DataFrame({'datetime': dates})

# Временные признаки
df['hour'] = df['datetime'].dt.hour
df['dayofweek'] = df['datetime'].dt.dayofweek
df['day'] = df['datetime'].dt.day
df['month'] = df['datetime'].dt.month
df['is_weekend'] = df['dayofweek'].apply(lambda x: 1 if x >= 5 else 0)
df['is_peak_hour'] = df['hour'].apply(lambda h: 1 if 18 <= h <= 22 else 0)

# Праздники / ивенты
event_days = set(np.random.choice(df['datetime'].dt.date.unique(), size=15, replace=False))
df['is_event_day'] = df['datetime'].dt.date.apply(lambda d: 1 if d in event_days else 0)
df

# Генерация пользователей
def simulate_users(row):
    base = 10
    if row['is_weekend']:
        base += 10
    if row['is_peak_hour']:
        base += 20
    if row['is_event_day']:
        base += 30
    noise = np.random.normal(0, 5)
    lam = max(0, base + noise)
    return int(np.random.poisson(lam))

df['users_online'] = df.apply(simulate_users, axis=1)

# Исторические признаки
df['prev_hour_users'] = df['users_online'].shift(1)
df['prev_2_hour_users'] = df['users_online'].shift(2)
df['prev_3_hour_users'] = df['users_online'].shift(3)
df['rolling_mean_3h'] = df['users_online'].rolling(3).mean()
df['rolling_std_3h'] = df['users_online'].rolling(3).std()

# Обработка пропусков
for col in ['prev_hour_users', 'prev_2_hour_users', 'prev_3_hour_users', 'rolling_mean_3h', 'rolling_std_3h']:
    df[col].fillna(df['users_online'].mean(), inplace=True)
df

# Визуализация по часам
plt.figure(figsize=(10, 4))
sns.lineplot(data=df, x="hour", y="users_online", ci=None)
plt.title("Среднее количество пользователей по часам")
plt.xlabel("Час дня")
plt.ylabel("Пользователи онлайн")
plt.grid(True)
plt.tight_layout()
plt.show()

# Визуализация по дням
df['date'] = df['datetime'].dt.date
daily_avg = df.groupby('date').agg({
    'users_online': 'mean',
    'is_weekend': 'max',
    'is_event_day': 'max'
}).reset_index()

plt.figure(figsize=(14, 5))
sns.scatterplot(
    data=daily_avg,
    x='date',
    y='users_online',
    hue='is_event_day',
    style='is_weekend',
    palette='deep'
)
plt.title("Средний онлайн по дням (выходные и ивенты)")
plt.xlabel("Дата")
plt.ylabel("Средний онлайн")
plt.legend(title='Ивент / Выходной', loc='upper right')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# ========== Обучение модели ==========
# Признаки
features = [
    'hour', 'dayofweek', 'is_weekend', 'is_peak_hour', 'is_event_day',
    'prev_hour_users', 'prev_2_hour_users', 'prev_3_hour_users',
    'rolling_mean_3h', 'rolling_std_3h'
]
X = df[features]
y = df['users_online']

# Деление на выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Масштабирование
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Обучение модели
regressor = RandomForestRegressor(n_estimators=100, random_state=42)
regressor.fit(X_train_scaled, y_train)
y_pred = regressor.predict(X_test_scaled)

# Расчёт количества серверов
server_capacity = 20
servers_needed = [ceil(p / server_capacity) for p in y_pred]

print("Примеры предсказаний:")
for i in range(10):
    print(f"Час #{i+1}: Предсказано пользователей: {y_pred[i]:.1f} → нужно серверов: {servers_needed[i]}")

# Метрики
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"\nМетрики модели:")
print(f"MAE  (средняя абсолютная ошибка):      {mae:.2f}")
print(f"RMSE (среднеквадратичная ошибка):      {rmse:.2f}")
print(f"R²    (коэффициент детерминации):      {r2:.2f}")

# Факт vs Предсказание (с легендой)
plt.figure(figsize=(7, 5))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.5, label='Предсказания модели')
plt.plot(
    [y_test.min(), y_test.max()],
    [y_test.min(), y_test.max()],
    'r--',
    label='Идеальное предсказание'
)
plt.xlabel("Фактическое количество пользователей")
plt.ylabel("Предсказанное количество пользователей")
plt.title("Демонстрация качества предсказания")
plt.legend(loc='upper left')
plt.grid(True)
plt.tight_layout()
plt.show()

# Остатки
residuals = y_test - y_pred
plt.figure(figsize=(7, 4))
sns.histplot(residuals, bins=40, kde=True)
plt.title("Распределение ошибок предсказания")
plt.xlabel("Ошибка предсказания")
plt.grid(True)
plt.tight_layout()
plt.show()

# Важность признаков
importances = regressor.feature_importances_
feature_importance = pd.DataFrame({
    'feature': features,
    'importance': importances
}).sort_values(by='importance', ascending=False)

print("\n Важность признаков:")
print(feature_importance)

# Train MAE (для сравнения с тестом)
y_train_pred = regressor.predict(X_train_scaled)
train_mae = mean_absolute_error(y_train, y_train_pred)
print(f"\n📄 Лог обучения:")
print(f"Train MAE: {train_mae:.2f}")
print(f"Test  MAE: {mae:.2f}")